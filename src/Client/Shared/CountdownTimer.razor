@inject StateContainer StateContainer
@implements IDisposable


<div @onclick="@(() => HandleClick())">
	<MudText Class="cursor-pointer">@_displayedTimeString</MudText>
</div>


@code {
	[Parameter, EditorRequired]
	public TimeSpan InitialDuration { get; set; } = TimeSpan.Zero;

	[Parameter]
	public string FormatString { get; set; } = @"m\:ss";

	//[Parameter]
	//public string CompletedStyle { get; set; } = @".blink {animation: blink-animation 1s steps(5, start) infinite;-webkit-animation: blink-animation 1s steps(5, start) infinite;}@keyframes blink-animation{to{visibility: hidden;}}@-webkit-keyframes blink-animation {to {visibility: hidden;}}";

	public TimerState State = TimerState.Paused;

	private TimeSpan _timeRemaining { get; set; } = TimeSpan.Zero;
	private DateTime _endTime { get; set; } = DateTime.UtcNow;
	private string _displayedTimeString = string.Empty;

	private void Update()
	{
		// Return early if timer is not running. Don't need to update display
		// in that case
		if (State != TimerState.Running) { return; }

		_timeRemaining = _endTime - DateTime.UtcNow;
		if (_timeRemaining > TimeSpan.Zero)
		{
			var newTimeString = (_endTime - DateTime.UtcNow).ToString(FormatString);
			if (!_displayedTimeString.Equals(newTimeString))
			{
				_displayedTimeString = newTimeString;
				StateHasChanged();
			}
		}
		else
		{
			// Stop the timer
			_timeRemaining = TimeSpan.Zero;
			State = TimerState.Completed;
			StateHasChanged();
		}
	}

	private void StartTimer()
	{
		State = TimerState.Running;
		_endTime = DateTime.UtcNow + _timeRemaining;
	}

	private void ResetTimer()
	{
		State = TimerState.Paused;
		_timeRemaining = InitialDuration;
	}

	private void PauseTimer()
	{
		State = TimerState.Paused;
	}

	private void HandleClick()
	{
		switch (State)
		{
			case TimerState.Running:
				PauseTimer();
				break;
			case TimerState.Paused:
				StartTimer();
				break;
			case TimerState.Completed:
				ResetTimer();
				break;
		}
	}

	protected override void OnInitialized()
	{
		StateContainer.OnTimeChange += Update;
		_timeRemaining = InitialDuration;
		_displayedTimeString = _timeRemaining.ToString(FormatString);
		//StartTimer();
	}

	public void Dispose()
	{
		StateContainer.OnTimeChange -= Update;
	}

	public enum TimerState
	{
		Running,
		Paused,
		Completed
	}
}
