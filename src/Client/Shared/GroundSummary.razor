@using ZoaIds.Client.Shared.RazorModels
@implements IDisposable
@inject StateContainer StateContainer


<style>
	.mud-table-cell-custom-group {
		font-weight: 500;
	}
</style>

@if (Airport is not null)
{
	<MudPaper Class="pa-5 ma-2">
		<h3>Filed Departures on Ground for @Airport.Name: @OnGroundDepartures.Sum(r => r.Count)</h3>
		<FlightSummaryPanels FlightSummaries="@OnGroundDepartures" />
	</MudPaper>

	<MudPaper Class="pa-5 ma-2">
		<h3>Prefiled Departures on Ground for @Airport.Name: @Prefiles.Sum(r => r.Count)</h3>
		<FlightSummaryPanels FlightSummaries="@Prefiles" />
	</MudPaper>

	<MudPaper Class="pa-5 ma-2">
		<h3>Aircraft on Ground without Flightplan for @Airport.Name: @OnGroundWithoutPlan.Sum(r => r.Count)</h3>
		<FlightSummaryPanels FlightSummaries="@OnGroundWithoutPlan" />
	</MudPaper>
}

@code {
	[Parameter, EditorRequired]
	public Airport? Airport { get; set; }

	public ICollection<SummaryRow> OnGroundDepartures { get; set; } = new List<SummaryRow>();
	public ICollection<SummaryRow> OnGroundWithoutPlan { get; set; } = new List<SummaryRow>();
	public ICollection<SummaryRow> Prefiles { get; set; } = new List<SummaryRow>();

	private void UpdateDeparturesLists()
	{
		if (Airport is null || StateContainer.VatsimDatafeed is null) { return; }

		var onGroundDepartures = StateContainer.VatsimDatafeed.GetActiveDeparturesFrom(Airport).Where(p => p.IsOnGroundAtAirport(Airport));
		OnGroundDepartures = CreateSummaryRows(onGroundDepartures);

		var prefiles = StateContainer.VatsimDatafeed.GetPrefiledDeparturesFrom(Airport);
		Prefiles = CreateSummaryRows(prefiles);

		var onGroundWithoutPlan = StateContainer.VatsimDatafeed.Pilots.Where(p => p.FlightPlan is null && p.IsOnGroundAtAirport(Airport));
		OnGroundWithoutPlan = new List<SummaryRow> { new SummaryRow("NONE", onGroundWithoutPlan) };
	}

	private List<SummaryRow> CreateSummaryRows(IEnumerable<IVatsimPilotActivity> pilots)
	{
		return pilots
			.GroupBy(p => p.FlightPlan.Arrival)
			.OrderByDescending(g => g.Count()).Select(g => new SummaryRow(g.Key, g))
			.ToList();
	}

	protected override void OnInitialized()
	{
		StateContainer.OnDatafeedUpdate += UpdateDeparturesLists;
	}

	protected override void OnParametersSet()
	{
		UpdateDeparturesLists();
	}

	public void Dispose()
	{
		StateContainer.OnDatafeedUpdate -= UpdateDeparturesLists;
	}
}
