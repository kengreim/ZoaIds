@inherits LayoutComponentBase
@using System.Threading
@implements IDisposable

<MudThemeProvider IsDarkMode="true" />
<MudDialogProvider />
<MudSnackbarProvider />

<MudLayout>
    <MudAppBar Elevation="0" Dense="true">
        <MudText>@CurrentTimeString</MudText>
        @*<MudIconButton Icon="@Icons.Material.Filled.Menu" Color="Color.Inherit" Edge="Edge.Start" OnClick="@((e) => DrawerToggle())" />*@
        <MudStack Row="true" Spacing="5" Class="ml-10">
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Home" Href="charts">Overview</MudButton>
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Cloud" Href="charts">Weather</MudButton>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.Route" Href="/charts">Routing</MudButton>
            <MudButton Color="Color.Primary" StartIcon="@Icons.Material.Filled.Map" Href="charts">Charts</MudButton>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.MenuBook" Href="/reference">Reference</MudButton>
            <MudButton Color="Color.Success" StartIcon="@Icons.Material.Filled.MenuBook" Href="/departures">Departures</MudButton>
        </MudStack>
        
        <MudSpacer />
        <MudText Color="Color.Warning"><b>ZOA IDS</b></MudText>
    </MudAppBar>
@*    <MudDrawer @bind-Open="_drawerOpen" Elevation="1">
        <MudDrawerHeader>
            <MudText Typo="Typo.h6">ZoaIds</MudText>
        </MudDrawerHeader>
        <NavMenu />
    </MudDrawer>*@
    <MudMainContent>
        <MudContainer MaxWidth="MaxWidth.False" Class="my-2 pt-5">
            @Body
        </MudContainer>
    </MudMainContent>
</MudLayout>

@code {
    //bool _drawerOpen = true;

    private Timer? _timer;
    public string CurrentTimeString { get; set; } = "";
    private static readonly string _format = "HH:mm:ss";

    //void DrawerToggle()
    //{
    //    _drawerOpen = !_drawerOpen;
    //}

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        _timer = new Timer(UpdateClock, null, 0, 250);
    }

    private void UpdateClock(object? stateInfo)
    {
        var now = DateTime.UtcNow;
        CurrentTimeString = now.ToString(_format);
        StateHasChanged();
    }

    public void Dispose()
    {
        _timer?.Dispose();
    }

}