@page "/departures"
@using System.Text.Json
@using ZoaIds.Shared.Models
@using ZoaIds.Shared.ExternalDataModels
@using ZoaIds.Client.Services
@using ZoaIds.Client.ApiClients
@implements IDisposable
@inject AirportsApiClient AirportsApiClient
@inject ILogger<Charts> Logger
@inject StateContainer StateContainer


<style>
	.mud-table-cell-custom-group {
		font-weight: 500;
	}
</style>

<MudTextField @bind-Value="AirportIcaoId" Label="Airport ICAO Id" Variant="Variant.Outlined" Adornment="Adornment.End" AdornmentIcon="@Icons.Material.Filled.KeyboardArrowRight" />

@if (OnGroundDepartures is not null)
{
	<MudPaper Class="pa-5 ma-2">
		<h3>Filed Departures on Ground: @OnGroundDepartures.Count</h3>
		@if (OnGroundDepartures.Count > 0)
		{
			<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" Class="mt-2" FixedHeader="true"
			Items="@OnGroundDepartures"
			GroupBy="@_pilotGroupDefinition"
			GroupHeaderStyle="background-color:var(--mud-palette-background-grey)">
				<ColGroup>
					<col style="width: 60px;" />
					<col />
					<col />
				</ColGroup>
				<HeaderContent>
					<MudTh>Callsign</MudTh>
					<MudTh>Route</MudTh>
				</HeaderContent>
				<GroupHeaderTemplate>
					<MudTh Class="mud-table-cell-custom-group" colspan="5">@context.Key: @context.Items.Count() departures</MudTh>
				</GroupHeaderTemplate>
				<RowTemplate>
					<MudTd DataLabel="Callsign">@context.Callsign</MudTd>
					<MudTd DataLabel="Route">@context.FlightPlan.Route</MudTd>
				</RowTemplate>
			</MudTable>
		}
	</MudPaper>
}

@if (OnGroundNoFlightPlan is not null)
{
	<MudPaper Class="pa-5 ma-2">
		<h3>On Ground Without Flightplan</h3>
		<MudText>Number of Aircraft: @OnGroundNoFlightPlan.Count</MudText>
	</MudPaper>
}

@if (Prefiles is not null)
{
	<MudPaper Class="pa-5 ma-2">
		<h3>Prefiled Flights (not connected): @Prefiles.Count</h3>
		@if (Prefiles.Count > 0)
		{
			<MudTable Hover="true" Breakpoint="Breakpoint.Sm" Dense="true" Class="mt-2" FixedHeader="true"
			  Items="@Prefiles"
			  GroupBy="@_prefileGroupDefinition"
			  GroupHeaderStyle="background-color:var(--mud-palette-background-grey)">
				<ColGroup>
					<col style="width: 60px;" />
					<col />
					<col />
				</ColGroup>
				<HeaderContent>
					<MudTh>Callsign</MudTh>
					<MudTh>Route</MudTh>
				</HeaderContent>
				<GroupHeaderTemplate>
					<MudTh Class="mud-table-cell-custom-group" colspan="5">@context.Key: @context.Items.Count() departures</MudTh>
				</GroupHeaderTemplate>
				<RowTemplate>
					<MudTd DataLabel="Callsign">@context.Callsign</MudTd>
					<MudTd DataLabel="Route">@context.FlightPlan.Route</MudTd>
				</RowTemplate>
			</MudTable>
		}
	</MudPaper>
}

@code {
	private string? _airportIcaoId;
	public string? AirportIcaoId
	{
		get => _airportIcaoId;
		set
		{
			_airportIcaoId = value?.ToUpper();
			UpdateOnUserAirportInput();
		}
	}

	public List<VatsimJsonPilot>? OnGroundDepartures { get; set; }
	public List<VatsimJsonPilot>? OnGroundNoFlightPlan { get; set; }
	public List<VatsimJsonPrefile>? Prefiles { get; set; }

	private Airport? _currentAirport;

	private TableGroupDefinition<VatsimJsonPilot> _pilotGroupDefinition = new()
    {
        GroupName = "Destination",
        Indentation = false,
        Expandable = true,
        IsInitiallyExpanded = false,
        Selector = (p) => p.FlightPlan.Arrival
    };

	private TableGroupDefinition<VatsimJsonPrefile> _prefileGroupDefinition = new()
	{
		GroupName = "Destination",
		Indentation = false,
		Expandable = true,
		IsInitiallyExpanded = false,
		Selector = (p) => p.FlightPlan.Arrival
	};

	protected override void OnInitialized()
	{
		StateContainer.OnChange += UpdateDisplayedDeparturesAndPrefiles;
		if (StateContainer.SelectedTowerCabAirport is not null)
		{
			AirportIcaoId = StateContainer.SelectedTowerCabAirport.IcaoId;
		}
	}

	private async Task UpdateOnUserAirportInput()
	{
		if (!string.IsNullOrWhiteSpace(_airportIcaoId))
		{
			_currentAirport = await AirportsApiClient.GetAirportByIcao(_airportIcaoId);
			StateContainer.SelectedTowerCabAirport = _currentAirport;
			UpdateDisplayedDeparturesAndPrefiles();
		}
	}

	private void UpdateDisplayedDeparturesAndPrefiles()
	{
		var allConnectedPilots = StateContainer.VatsimDatafeed?.Pilots;
		var allPrefiledPlans = StateContainer.VatsimDatafeed?.Prefiles;

		if (_currentAirport is not null && allConnectedPilots is not null && allPrefiledPlans is not null)
		{
			var summary = CreateAirportDepartureSummary(allConnectedPilots, allPrefiledPlans, _currentAirport);
			OnGroundDepartures = summary.OnGroundDepartures;
			OnGroundNoFlightPlan = summary.OnGroundNoFlightPlan;
			Prefiles = summary.DeparturePrefiles;
		}		

		StateHasChanged();
	}

	private IEnumerable<VatsimJsonPilot> FilterPilotsOnGroundAtAirport(List<VatsimJsonPilot> allPilots, Airport airport)
	{
		return allPilots.Where(p => IsOnGroundAtAirport(p, airport));
	}

	private IEnumerable<VatsimJsonPilot> FilterPrefilesDepartingAirport(List<VatsimJsonPilot> allPilots, Airport airport)
	{
		return allPilots.Where(p => string.Equals(p.FlightPlan.Departure, airport.IcaoId, StringComparison.OrdinalIgnoreCase));
	}

	private AirportDepartureSummary CreateAirportDepartureSummary(IEnumerable<VatsimJsonPilot> allPilots, IEnumerable<VatsimJsonPrefile> allPrefiles, Airport airport)
	{
		var onGroundDepartures = allPilots
			.Where(p =>
				p.FlightPlan is not null
				&& string.Equals(p.FlightPlan.Departure, airport.IcaoId, StringComparison.OrdinalIgnoreCase)
				&& IsOnGroundAtAirport(p, airport))
			.ToList();
		var onGroundNoFlightPlan = allPilots
			.Where(p =>
				p.FlightPlan is null
				&& IsOnGroundAtAirport(p, airport))
			.ToList();
		var departurePrefiles = allPrefiles
			.Where(p => string.Equals(p.FlightPlan.Departure, airport.IcaoId, StringComparison.OrdinalIgnoreCase))
			.ToList();

		return new AirportDepartureSummary(onGroundDepartures, onGroundNoFlightPlan, departurePrefiles);
	}

	private bool IsOnGroundAtAirport(VatsimJsonPilot pilot, Airport airport, int maxGroundspeed = 40, int maxElevationDelta = 200, double distanceRangeMiles = 4.0)
	{
		if (pilot.Latitude is null || pilot.Longitude is null)
		{
			return false;
		}
		else
		{
			var pilotCoord = new GeoCoordinate((double)pilot.Latitude, (double)pilot.Longitude);
			return pilot.Groundspeed < maxGroundspeed
				&& (pilot.Altitude is not null && Math.Abs((double)pilot.Altitude - airport.Elevation) < maxElevationDelta)
				&& pilotCoord.EuclideanDistanceFrom(airport.Location) < distanceRangeMiles;
		}
	}

	public record AirportDepartureSummary(List<VatsimJsonPilot> OnGroundDepartures, List<VatsimJsonPilot> OnGroundNoFlightPlan, List<VatsimJsonPrefile> DeparturePrefiles) { }

	public void Dispose()
	{
		StateContainer.OnChange -= UpdateDisplayedDeparturesAndPrefiles;
	}
}
